// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var _a;
import * as Core from "./core.mjs";
import * as Errors from "./error.mjs";
import * as Pagination from "./pagination.mjs";
import * as Uploads from "./uploads.mjs";
import * as API from "./resources/index.mjs";
import { SessionListResponsesSessionsCursor, Sessions, } from "./resources/sessions.mjs";
/**
 * API Client for interfacing with the Steel API.
 */
export class Steel extends Core.APIClient {
    /**
     * API Client for interfacing with the Steel API.
     *
     * @param {string | undefined} [opts.steelAPIKey=process.env['STEEL_API_KEY'] ?? undefined]
     * @param {string} [opts.baseURL=process.env['STEEL_BASE_URL'] ?? https://api.steel.dev] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL = Core.readEnv('STEEL_BASE_URL'), steelAPIKey = Core.readEnv('STEEL_API_KEY'), ...opts } = {}) {
        if (steelAPIKey === undefined) {
            throw new Errors.SteelError("The STEEL_API_KEY environment variable is missing or empty; either provide it, or instantiate the Steel client with an steelAPIKey option, like new Steel({ steelAPIKey: 'My Steel API Key' }).");
        }
        const options = {
            steelAPIKey,
            ...opts,
            baseURL: baseURL || `https://api.steel.dev`,
        };
        super({
            baseURL: options.baseURL,
            timeout: options.timeout ?? 60000 /* 1 minute */,
            httpAgent: options.httpAgent,
            maxRetries: options.maxRetries,
            fetch: options.fetch,
        });
        this.sessions = new API.Sessions(this);
        this._options = options;
        this.steelAPIKey = steelAPIKey;
    }
    defaultQuery() {
        return this._options.defaultQuery;
    }
    defaultHeaders(opts) {
        return {
            ...super.defaultHeaders(opts),
            ...this._options.defaultHeaders,
        };
    }
    authHeaders(opts) {
        return { 'steel-api-key': this.steelAPIKey };
    }
}
_a = Steel;
Steel.Steel = _a;
Steel.DEFAULT_TIMEOUT = 60000; // 1 minute
Steel.SteelError = Errors.SteelError;
Steel.APIError = Errors.APIError;
Steel.APIConnectionError = Errors.APIConnectionError;
Steel.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;
Steel.APIUserAbortError = Errors.APIUserAbortError;
Steel.NotFoundError = Errors.NotFoundError;
Steel.ConflictError = Errors.ConflictError;
Steel.RateLimitError = Errors.RateLimitError;
Steel.BadRequestError = Errors.BadRequestError;
Steel.AuthenticationError = Errors.AuthenticationError;
Steel.InternalServerError = Errors.InternalServerError;
Steel.PermissionDeniedError = Errors.PermissionDeniedError;
Steel.UnprocessableEntityError = Errors.UnprocessableEntityError;
Steel.toFile = Uploads.toFile;
Steel.fileFromPath = Uploads.fileFromPath;
export { SteelError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError, } from "./error.mjs";
export var toFile = Uploads.toFile;
export var fileFromPath = Uploads.fileFromPath;
Steel.Sessions = Sessions;
Steel.SessionListResponsesSessionsCursor = SessionListResponsesSessionsCursor;
export default Steel;
//# sourceMappingURL=index.mjs.map